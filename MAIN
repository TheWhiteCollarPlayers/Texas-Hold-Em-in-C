
/*
 ============================================================================
 Name        : Poker.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

//library inclusions, don't worry about this for papyrus
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

//function prototypes
void printintro(void); // printing the instructions and start options for the game
void printerror(void); //function to print error report
int checkante(int x); //checks if AI is eligible to ante
int Pcheckante(int x); //checks if P is eligible and wants to ante
int deal(int drawn[]); //draws a valid card based off of drawn array
int getsuit(int cin); //returns value of suit of input card, 1-4
int pocketrank(int in1, int in2, int in1s, int in2s); //fun for determining rank of pocket cards
int card;


int main(void) {
	int input; //var for taking user decision input
	int vektor[52]; //shuffled card array'
	int drawn[52]; // tracks dealt cards
	int z; //multi purpose int var
	int pot; //var for the table pot

	int AI1bet;
	int AI2bet;
	int Pbet;
	int AI3bet;

	int AI1pr;
	int AI2pr;
	int AI3pr;

	int AI1play=1;
	int AI2play=1;
	int Pplay=1;
	int AI3play=1;

	int AI1cash=500;
	int AI2cash=500;
	int Pcash=500;
	int AI3cash=500;

	int AI1pc1; //pocket cards and suits for each player
	int AI1pc2;
	int AI1pc1s;
	int AI1pc2s;

	int AI2pc1;
	int AI2pc2;
	int AI2pc1s;
	int AI2pc2s;

	int Ppc1;
	int Ppc2;
	int Ppc1s;
	int Ppc2s;

	int AI3pc1;
	int AI3pc2;
	int AI3pc1s;
	int AI3pc2s;

	int bool; //generic bool value to be used for checks

	srand(time(NULL)); //seed random number generator

	printintro(); //print introduction
	//take user input
	fflush(stdin);
	scanf("%d",&input);

	//if statement to decide if game should start or to exit game, includes error checking
	if (input==2){ //selected to quit, so exit program
		printf("\n\nProgram terminated.\n\n\n\n");
		fflush(stdout);
	}
	else if (input==1){ //chose to play, so start game
		//GAME RUNS WITHIN THIS BRANCH, EXITING THIS BLOCK EXITS PROGRAM
		pot=0;
		printf("\n\nGAME STARTED!\n\n");
		fflush(stdout);

		printf("Shuffling Cards...\n\n");
		fflush(stdout);

		//seed random number generator
		srand(time(NULL));

		for (int i = 0; i < 52; i++) {     // fill array
			vektor[i] = (i+1);

		}


		for (int i = 0; i < 52; i++) {    // shuffle array
			int temp = vektor[i];
			int randomIndex = rand() % 52;

			vektor[i]           = vektor[randomIndex];
			vektor[randomIndex] = temp; //vektor is your shuffled card array
		}
		printf("Cards shuffled! Taking antes...\n\n");
		fflush(stdout);

		bool = checkante(AI1cash);
		if (bool==1){
			AI1cash=(AI1cash-1);
			pot=pot+1;
			AI1play=1;
			printf("\nCP1 has anted!\n");
			fflush(stdout);
		}
		else {
			AI1play=0;
			printf("\nCP1 has busted out and will not play.\n");
			fflush(stdout);
		}
		bool = checkante(AI2cash);
		if (bool==1){
			AI2cash=(AI2cash-1);
			pot=pot+1;
			AI2play=1;
			printf("\nCP2 has anted!\n");
			fflush(stdout);
		}
		else {
			AI2play=0;
			printf("\nCP2 has busted out and will not play.");
			fflush(stdout);
		}
		bool=Pcheckante(Pcash);
		if (bool==1){
			Pcash=(Pcash-1);
			pot=pot+1;
			Pplay=1;
			printf("\nYou have anted!\n");
			fflush(stdout);
		}
		else {
			Pplay=0;
			goto Exit;
		}
		bool = checkante(AI3cash);
		if (bool==1){
			AI3cash=(AI3cash-1);
			pot=pot+1;
			AI3play=1;
			printf("\nCP3 has anted!\n");
			fflush(stdout);
		}
		else {
			AI3play=0;
			printf("\nCP3 has busted out and will not play.");
			fflush(stdout);
		}
		//Antes have been taken, deal cards
		printf("\nAntes have been taken, dealing cards!\n");
		fflush(stdout);

		//init drawn array:
		for (int i=0; i < 52; i++){
			drawn[i] = 0;
		}
		//deal cards to each player and assign to drawn array

		card=deal(drawn);
		z=(card-1);
		drawn[z]=card;

		AI1pc1=card; //AI1 Pocket card 1
		AI1pc1s=getsuit(AI1pc1);

		card=deal(drawn);
		z=(card-1);
		drawn[z]=card;

		AI1pc2=card; //AI1 Pocket card 2
		AI1pc2s=getsuit(AI1pc2);

		card=deal(drawn);
		z=(card-1);
		drawn[z]=card;

		AI2pc1=card; //AI2 pocket card 1
		AI2pc1s=getsuit(AI2pc1);

		card=deal(drawn);
		z=(card-1);
		drawn[z]=card;

		AI2pc2=card; //AI2 pocket card 2
		AI2pc2s=getsuit(AI2pc2);

		card=deal(drawn);
		z=(card-1);
		drawn[z]=card;

		Ppc1=card; //P pocket card 1
		Ppc1s=getsuit(Ppc1);

		card=deal(drawn);
		z=(card-1);
		drawn[z]=card;

		Ppc2=card; //P pocket card 2
		Ppc2s=getsuit(Ppc2);

		card=deal(drawn);
		z=(card-1);
		drawn[z]=card;

		AI3pc1=card; //AI3 pocket card 1
		AI3pc1s=getsuit(AI3pc1);

		card=deal(drawn);
		z=(card-1);
		drawn[z]=card;

		AI3pc2=card; //AI3 pocket card 2
		AI3pc2s=getsuit(AI3pc2);

		//cards are dealt, run AI1 and AI2 operations:

		//get AI1 pocket card rank:
		AI1pr=pocketrank(AI1pc1,AI1pc2,AI1pc1s,AI1pc2s);
		//z is the rank, decide what to do
		if (AI1pr < 7){
			AI1bet=0;
			printf("\nAI1 checks.\n");
			fflush(stdout);
		}
		else if ((AI1pr >= 7) && (AI1pr <= 13) ){
			AI1bet=5;
			AI1cash=AI1cash-5;
			pot=pot+5;
			printf("\n") //WIP here
		}


		//start player menu
		//run AI3 operations

	}
	else { //invalid input, terminate program
		printerror(); //function prints error and terminates program
	}
	Exit:
	return EXIT_SUCCESS;
}
//end of main

//function definitions:

void printintro(void) //defining function for printing game instructions
{
	printf("\nWelcome to Texas Hold 'Em Poker!\n");
	fflush(stdout);
	printf("Would you like to play?\n");
	fflush(stdout);
	printf("Type '1' for 'Yes'\n");
	fflush(stdout);
	printf("Type '2' for 'No'\n");
	fflush(stdout);
	printf("Your response: ");
	fflush(stdout);

}
void printerror(void) //defining function for printing error report
{
	printf("\n\nError! Invalid input!\n Program terminated.\n\n\n");
	fflush(stdout);
}
int checkante(int x){
	int i;
	if (x>=1){
		i=1;
	}
	else {
		i=0;
	}
	return i;

}
int Pcheckante(int x){
	int i;
	int in;
	if (x>=1){
		printf("\nWould you like to ante?\n1) Yes\n2) No\nYour response: ");
		fflush(stdout);
		fflush(stdin);
		scanf("%d",&in);
		if (in==1){
			i=1;
		}
		else if (in==2){
			printf("\nYou have chosen not to ante! Exiting game.");
			fflush(stdout);
			i=0;
		}
		else{
			printf("\n INVALID INPUT! EXITING GAME!");
			i=0;
		}
	}
	else {
		printf("\nYou have busted out! Exiting game.\n");
		fflush(stdout);
		i=0;
	}
	return i;
}

int deal(int drawn[]){
	int i;
	int x;
	int z;
	int card;
	//first check to make sure not all cards have been drawn
	z=0;
	i=0;
	for (int y=0;y<52;y++) {
		if (drawn[z]==0){
			//continue
			z++;
		}
		else {
			//add one to counter
			i++;
			z++;

		}
	}
	if (i==52){
		//all cards have been dealt, report error and exit
		printf("\nALL CARDS HAVE BEEN DEALT, ERROR\n");
		card=0;
		goto Funexit;
	}
	//all cards have not been dealt, so try to deal a card
	retry:
	x=(rand()%52+1); //gets a card ID to deal
	z=0;
	for (int y=0;y<52;y++) {

		if (drawn[z]==x) {
			//ID is a repeat so try again
			goto retry; //picks another card

		}
		else{
			//not a repeat, continue
			z++;
		}

	}
	// loop has finished so card is valid
	card=x;
	Funexit:
	return card;
}
int getsuit(int cin){
	int suit;
	if (cin<14){
		//is a heart
		suit = 1;
		goto funexit;
	}
	else if ((cin>=14) && (cin<27)){
		//is a diamond
		suit = 2;
		goto funexit;

	}
	else if ((cin>=27) && (cin<40)){
		//is a club
		suit = 3;
		goto funexit;

	}
	else {
		//is a spade
		suit = 4;
		goto funexit;

	}
	funexit:
	return suit;
}
int pocketrank(int, in1, int in2, int in1s, int in2s){
	int pc1;
	int pc1s;
	int pc2;
	int pc2s;
	int rank;
	//find lowest p card and assign accordingly, use pc1 and pc2 for testing
	if (in1<in2){
		pc1=in1;
		pc1s=in1s;
		pc2=in2;
		pc2s=in2s;
	}
	else{
		pc1=in2;
		pc1s=in2s;
		pc2=in1;
		pc2s=in1s;
	}

	//check for pairs
	if (((pc1+13) == pc2) || ((pc1+26) == pc2) || ((pc1+39) == pc2)){
		//is a pair, check low card suit to determine rank
		if (pc1s == 1){
			//is a heart
			rank = (pc1+13);
			goto funexit;
		}
		else if (pc1s == 2){
			//is a diamond
			rank = pc1;
			goto funexit;
		}
		else if (pc1s == 3){
			//is a club
			rank = (pc1-13);
			goto funexit;
		}
		else {
			//is a spade
			rank = (pc1-26);
			goto funexit;
		}
	}

	else {
		//is not a pair, higher id is pc2, determine rank
		if (pc2s == 1){
			//is a heart
			rank = (pc2);
			goto funexit;
		}
		else if (pc2s == 2){
			//is a diamond
			rank = (pc2-13);
			goto funexit;
		}
		else if (pc2s == 3){
			//is a club
			rank = (pc2-26);
			goto funexit;
		}
		else {
			//is a spade
			rank = (pc2-39);
			goto funexit;
		}
	}

	funexit:
	return rank;
}

